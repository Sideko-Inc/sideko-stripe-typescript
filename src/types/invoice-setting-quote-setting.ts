import {
  ConnectAccountReference,
  External$ConnectAccountReference,
  Schemas$ConnectAccountReference,
} from "./connect-account-reference";
import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type InvoiceSettingQuoteSetting = {
  /**
   * Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
   */
  daysUntilDue?: number | null | undefined;
  issuer: ConnectAccountReference;
};

/**
 * @internal
 * InvoiceSettingQuoteSetting without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$InvoiceSettingQuoteSetting = {
  days_until_due?: number | null | undefined;
  issuer: External$ConnectAccountReference;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object InvoiceSettingQuoteSetting
 */
const SchemaIn$InvoiceSettingQuoteSetting: z.ZodType<
  InvoiceSettingQuoteSetting, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    days_until_due: z.number().int().nullable().optional(),
    issuer: z.lazy(() => Schemas$ConnectAccountReference.in),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      days_until_due: "daysUntilDue",
      issuer: "issuer",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$InvoiceSettingQuoteSetting
 */
const SchemaOut$InvoiceSettingQuoteSetting: z.ZodType<
  External$InvoiceSettingQuoteSetting, // output type of this zod object
  z.ZodTypeDef,
  InvoiceSettingQuoteSetting // the object to be transformed
> = z
  .object({
    daysUntilDue: z.number().int().nullable().optional(),
    issuer: z.lazy(() => Schemas$ConnectAccountReference.out),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      daysUntilDue: "days_until_due",
      issuer: "issuer",
    });
  });

export const Schemas$InvoiceSettingQuoteSetting = {
  in: SchemaIn$InvoiceSettingQuoteSetting,
  out: SchemaOut$InvoiceSettingQuoteSetting,
};
