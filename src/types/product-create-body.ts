import {
  External$ProductCreateBodyDefaultPriceData,
  ProductCreateBodyDefaultPriceData,
  Schemas$ProductCreateBodyDefaultPriceData,
} from "./product-create-body-default-price-data";
import {
  External$ProductCreateBodyMarketingFeaturesItem,
  ProductCreateBodyMarketingFeaturesItem,
  Schemas$ProductCreateBodyMarketingFeaturesItem,
} from "./product-create-body-marketing-features-item";
import {
  External$ProductCreateBodyMetadata,
  ProductCreateBodyMetadata,
  Schemas$ProductCreateBodyMetadata,
} from "./product-create-body-metadata";
import {
  External$ProductCreateBodyPackageDimensions,
  ProductCreateBodyPackageDimensions,
  Schemas$ProductCreateBodyPackageDimensions,
} from "./product-create-body-package-dimensions";
import { zodRequiredAny, zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

/**
 * ProductCreateBody
 */
export type ProductCreateBody = {
  /**
   * Whether the product is currently available for purchase. Defaults to `true`.
   */
  active?: boolean | undefined;
  /**
   * Data used to generate a new [Price](https://stripe.com/docs/api/prices) object. This Price will be set as the default price for this product.
   */
  defaultPriceData?: ProductCreateBodyDefaultPriceData | undefined;
  /**
   * The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
   */
  description?: string | undefined;
  /**
   * Specifies which fields in the response should be expanded.
   */
  expand?: string[] | undefined;
  /**
   * An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.
   */
  id?: string | undefined;
  /**
   * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
   */
  images?: string[] | undefined;
  /**
   * A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).
   */
  marketingFeatures?: ProductCreateBodyMarketingFeaturesItem[] | undefined;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
   */
  metadata?: ProductCreateBodyMetadata | undefined;
  /**
   * The product's name, meant to be displayable to the customer.
   */
  name: string;
  /**
   * The dimensions of this product for shipping purposes.
   */
  packageDimensions?: ProductCreateBodyPackageDimensions | undefined;
  /**
   * Whether this product is shipped (i.e., physical goods).
   */
  shippable?: boolean | undefined;
  /**
   * An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
   *
   * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
   *  It must contain at least one letter. Only used for subscription payments.
   */
  statementDescriptor?: string | undefined;
  /**
   * A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
   */
  taxCode?: string | undefined;
  /**
   * A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal.
   */
  unitLabel?: string | undefined;
  /**
   * A URL of a publicly-accessible webpage for this product.
   */
  url?: string | undefined;

  // Index types must also accommodate all defined properties if present (typescript limitation)
  // In reality all additional properties should only have type `any`
  // (there might be some duplication here)
  [additionalProperty: string]:
    | (boolean | undefined)
    | (ProductCreateBodyDefaultPriceData | undefined)
    | (string | undefined)
    | (string[] | undefined)
    | (string | undefined)
    | (string[] | undefined)
    | (ProductCreateBodyMarketingFeaturesItem[] | undefined)
    | (ProductCreateBodyMetadata | undefined)
    | string
    | (ProductCreateBodyPackageDimensions | undefined)
    | (boolean | undefined)
    | (string | undefined)
    | (string | undefined)
    | (string | undefined)
    | (string | undefined)
    | any
    | null
    | undefined;
};

/**
 * @internal
 * ProductCreateBody without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$ProductCreateBody = {
  active?: boolean | undefined;
  default_price_data?: External$ProductCreateBodyDefaultPriceData | undefined;
  description?: string | undefined;
  expand?: string[] | undefined;
  id?: string | undefined;
  images?: string[] | undefined;
  marketing_features?:
    | External$ProductCreateBodyMarketingFeaturesItem[]
    | undefined;
  metadata?: External$ProductCreateBodyMetadata | undefined;
  name: string;
  package_dimensions?: External$ProductCreateBodyPackageDimensions | undefined;
  shippable?: boolean | undefined;
  statement_descriptor?: string | undefined;
  tax_code?: string | undefined;
  unit_label?: string | undefined;
  url?: string | undefined;

  [additionalProperty: string]:
    | (boolean | undefined)
    | (External$ProductCreateBodyDefaultPriceData | undefined)
    | (string | undefined)
    | (string[] | undefined)
    | (string | undefined)
    | (string[] | undefined)
    | (External$ProductCreateBodyMarketingFeaturesItem[] | undefined)
    | (External$ProductCreateBodyMetadata | undefined)
    | string
    | (External$ProductCreateBodyPackageDimensions | undefined)
    | (boolean | undefined)
    | (string | undefined)
    | (string | undefined)
    | (string | undefined)
    | (string | undefined)
    | External$ProductCreateBody
    | null
    | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object ProductCreateBody
 */
const SchemaIn$ProductCreateBody: z.ZodType<
  ProductCreateBody, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    active: z.boolean().optional(),
    default_price_data: Schemas$ProductCreateBodyDefaultPriceData.in.optional(),
    description: z.string().optional(),
    expand: z.array(z.string()).optional(),
    id: z.string().optional(),
    images: z.array(z.string()).optional(),
    marketing_features: z
      .array(Schemas$ProductCreateBodyMarketingFeaturesItem.in)
      .optional(),
    metadata: Schemas$ProductCreateBodyMetadata.in.optional(),
    name: z.string(),
    package_dimensions:
      Schemas$ProductCreateBodyPackageDimensions.in.optional(),
    shippable: z.boolean().optional(),
    statement_descriptor: z.string().optional(),
    tax_code: z.string().optional(),
    unit_label: z.string().optional(),
    url: z.string().optional(),
  })
  .catchall(zodRequiredAny)
  .transform((obj) => {
    return zodTransform(obj, {
      active: "active",
      default_price_data: "defaultPriceData",
      description: "description",
      expand: "expand",
      id: "id",
      images: "images",
      marketing_features: "marketingFeatures",
      metadata: "metadata",
      name: "name",
      package_dimensions: "packageDimensions",
      shippable: "shippable",
      statement_descriptor: "statementDescriptor",
      tax_code: "taxCode",
      unit_label: "unitLabel",
      url: "url",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$ProductCreateBody
 */
const SchemaOut$ProductCreateBody: z.ZodType<
  External$ProductCreateBody, // output type of this zod object
  z.ZodTypeDef,
  ProductCreateBody // the object to be transformed
> = z
  .object({
    active: z.boolean().optional(),
    defaultPriceData: Schemas$ProductCreateBodyDefaultPriceData.out.optional(),
    description: z.string().optional(),
    expand: z.array(z.string()).optional(),
    id: z.string().optional(),
    images: z.array(z.string()).optional(),
    marketingFeatures: z
      .array(Schemas$ProductCreateBodyMarketingFeaturesItem.out)
      .optional(),
    metadata: Schemas$ProductCreateBodyMetadata.out.optional(),
    name: z.string(),
    packageDimensions:
      Schemas$ProductCreateBodyPackageDimensions.out.optional(),
    shippable: z.boolean().optional(),
    statementDescriptor: z.string().optional(),
    taxCode: z.string().optional(),
    unitLabel: z.string().optional(),
    url: z.string().optional(),
  })
  .catchall(zodRequiredAny)
  .transform((obj) => {
    return zodTransform(obj, {
      active: "active",
      defaultPriceData: "default_price_data",
      description: "description",
      expand: "expand",
      id: "id",
      images: "images",
      marketingFeatures: "marketing_features",
      metadata: "metadata",
      name: "name",
      packageDimensions: "package_dimensions",
      shippable: "shippable",
      statementDescriptor: "statement_descriptor",
      taxCode: "tax_code",
      unitLabel: "unit_label",
      url: "url",
    });
  });

export const Schemas$ProductCreateBody = {
  in: SchemaIn$ProductCreateBody,
  out: SchemaOut$ProductCreateBody,
};
