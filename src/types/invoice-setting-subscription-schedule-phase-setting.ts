import {
  ConnectAccountReference,
  External$ConnectAccountReference,
  Schemas$ConnectAccountReference,
} from "./connect-account-reference";
import {
  DeletedTaxId,
  External$DeletedTaxId,
  Schemas$DeletedTaxId,
} from "./deleted-tax-id";
import { External$TaxId, Schemas$TaxId, TaxId } from "./tax-id";
import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type InvoiceSettingSubscriptionSchedulePhaseSetting = {
  /**
   * The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.
   */
  accountTaxIds?: (string | TaxId | DeletedTaxId)[] | null | undefined;
  /**
   * Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
   */
  daysUntilDue?: number | null | undefined;
  issuer?: ConnectAccountReference | undefined;
};

/**
 * @internal
 * InvoiceSettingSubscriptionSchedulePhaseSetting without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$InvoiceSettingSubscriptionSchedulePhaseSetting = {
  account_tax_ids?:
    | (string | External$TaxId | External$DeletedTaxId)[]
    | null
    | undefined;
  days_until_due?: number | null | undefined;
  issuer?: External$ConnectAccountReference | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object InvoiceSettingSubscriptionSchedulePhaseSetting
 */
const SchemaIn$InvoiceSettingSubscriptionSchedulePhaseSetting: z.ZodType<
  InvoiceSettingSubscriptionSchedulePhaseSetting, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    account_tax_ids: z
      .array(
        z.union([
          z.string(),
          z.lazy(() => Schemas$TaxId.in),
          Schemas$DeletedTaxId.in,
        ]),
      )
      .nullable()
      .optional(),
    days_until_due: z.number().int().nullable().optional(),
    issuer: z.lazy(() => Schemas$ConnectAccountReference.in.optional()),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      account_tax_ids: "accountTaxIds",
      days_until_due: "daysUntilDue",
      issuer: "issuer",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$InvoiceSettingSubscriptionSchedulePhaseSetting
 */
const SchemaOut$InvoiceSettingSubscriptionSchedulePhaseSetting: z.ZodType<
  External$InvoiceSettingSubscriptionSchedulePhaseSetting, // output type of this zod object
  z.ZodTypeDef,
  InvoiceSettingSubscriptionSchedulePhaseSetting // the object to be transformed
> = z
  .object({
    accountTaxIds: z
      .array(
        z.union([
          z.string(),
          z.lazy(() => Schemas$TaxId.out),
          Schemas$DeletedTaxId.out,
        ]),
      )
      .nullable()
      .optional(),
    daysUntilDue: z.number().int().nullable().optional(),
    issuer: z.lazy(() => Schemas$ConnectAccountReference.out.optional()),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      accountTaxIds: "account_tax_ids",
      daysUntilDue: "days_until_due",
      issuer: "issuer",
    });
  });

export const Schemas$InvoiceSettingSubscriptionSchedulePhaseSetting = {
  in: SchemaIn$InvoiceSettingSubscriptionSchedulePhaseSetting,
  out: SchemaOut$InvoiceSettingSubscriptionSchedulePhaseSetting,
};
