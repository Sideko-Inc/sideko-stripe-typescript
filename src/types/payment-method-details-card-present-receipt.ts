import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type PaymentMethodDetailsCardPresentReceipt = {
  /**
   * The type of account being debited or credited
   */
  accountType?: ("checking" | "credit" | "prepaid" | "unknown") | undefined;
  /**
   * EMV tag 9F26, cryptogram generated by the integrated circuit chip.
   */
  applicationCryptogram?: string | null | undefined;
  /**
   * Mnenomic of the Application Identifier.
   */
  applicationPreferredName?: string | null | undefined;
  /**
   * Identifier for this transaction.
   */
  authorizationCode?: string | null | undefined;
  /**
   * EMV tag 8A. A code returned by the card issuer.
   */
  authorizationResponseCode?: string | null | undefined;
  /**
   * Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
   */
  cardholderVerificationMethod?: string | null | undefined;
  /**
   * EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
   */
  dedicatedFileName?: string | null | undefined;
  /**
   * The outcome of a series of EMV functions performed by the card reader.
   */
  terminalVerificationResults?: string | null | undefined;
  /**
   * An indication of various EMV functions performed during the transaction.
   */
  transactionStatusInformation?: string | null | undefined;
};

/**
 * @internal
 * PaymentMethodDetailsCardPresentReceipt without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$PaymentMethodDetailsCardPresentReceipt = {
  account_type?: ("checking" | "credit" | "prepaid" | "unknown") | undefined;
  application_cryptogram?: string | null | undefined;
  application_preferred_name?: string | null | undefined;
  authorization_code?: string | null | undefined;
  authorization_response_code?: string | null | undefined;
  cardholder_verification_method?: string | null | undefined;
  dedicated_file_name?: string | null | undefined;
  terminal_verification_results?: string | null | undefined;
  transaction_status_information?: string | null | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object PaymentMethodDetailsCardPresentReceipt
 */
const SchemaIn$PaymentMethodDetailsCardPresentReceipt: z.ZodType<
  PaymentMethodDetailsCardPresentReceipt, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    account_type: z
      .enum(["checking", "credit", "prepaid", "unknown"])
      .optional(),
    application_cryptogram: z.string().nullable().optional(),
    application_preferred_name: z.string().nullable().optional(),
    authorization_code: z.string().nullable().optional(),
    authorization_response_code: z.string().nullable().optional(),
    cardholder_verification_method: z.string().nullable().optional(),
    dedicated_file_name: z.string().nullable().optional(),
    terminal_verification_results: z.string().nullable().optional(),
    transaction_status_information: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      account_type: "accountType",
      application_cryptogram: "applicationCryptogram",
      application_preferred_name: "applicationPreferredName",
      authorization_code: "authorizationCode",
      authorization_response_code: "authorizationResponseCode",
      cardholder_verification_method: "cardholderVerificationMethod",
      dedicated_file_name: "dedicatedFileName",
      terminal_verification_results: "terminalVerificationResults",
      transaction_status_information: "transactionStatusInformation",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$PaymentMethodDetailsCardPresentReceipt
 */
const SchemaOut$PaymentMethodDetailsCardPresentReceipt: z.ZodType<
  External$PaymentMethodDetailsCardPresentReceipt, // output type of this zod object
  z.ZodTypeDef,
  PaymentMethodDetailsCardPresentReceipt // the object to be transformed
> = z
  .object({
    accountType: z
      .enum(["checking", "credit", "prepaid", "unknown"])
      .optional(),
    applicationCryptogram: z.string().nullable().optional(),
    applicationPreferredName: z.string().nullable().optional(),
    authorizationCode: z.string().nullable().optional(),
    authorizationResponseCode: z.string().nullable().optional(),
    cardholderVerificationMethod: z.string().nullable().optional(),
    dedicatedFileName: z.string().nullable().optional(),
    terminalVerificationResults: z.string().nullable().optional(),
    transactionStatusInformation: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      accountType: "account_type",
      applicationCryptogram: "application_cryptogram",
      applicationPreferredName: "application_preferred_name",
      authorizationCode: "authorization_code",
      authorizationResponseCode: "authorization_response_code",
      cardholderVerificationMethod: "cardholder_verification_method",
      dedicatedFileName: "dedicated_file_name",
      terminalVerificationResults: "terminal_verification_results",
      transactionStatusInformation: "transaction_status_information",
    });
  });

export const Schemas$PaymentMethodDetailsCardPresentReceipt = {
  in: SchemaIn$PaymentMethodDetailsCardPresentReceipt,
  out: SchemaOut$PaymentMethodDetailsCardPresentReceipt,
};
