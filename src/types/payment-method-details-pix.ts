import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type PaymentMethodDetailsPix = {
  /**
   * Unique transaction id generated by BCB
   */
  bankTransactionId?: string | null | undefined;
};

/**
 * @internal
 * PaymentMethodDetailsPix without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$PaymentMethodDetailsPix = {
  bank_transaction_id?: string | null | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object PaymentMethodDetailsPix
 */
const SchemaIn$PaymentMethodDetailsPix: z.ZodType<
  PaymentMethodDetailsPix, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    bank_transaction_id: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      bank_transaction_id: "bankTransactionId",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$PaymentMethodDetailsPix
 */
const SchemaOut$PaymentMethodDetailsPix: z.ZodType<
  External$PaymentMethodDetailsPix, // output type of this zod object
  z.ZodTypeDef,
  PaymentMethodDetailsPix // the object to be transformed
> = z
  .object({
    bankTransactionId: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      bankTransactionId: "bank_transaction_id",
    });
  });

export const Schemas$PaymentMethodDetailsPix = {
  in: SchemaIn$PaymentMethodDetailsPix,
  out: SchemaOut$PaymentMethodDetailsPix,
};
