import {
  External$TerminalReaderCreateBodyMetadataObj0,
  Schemas$TerminalReaderCreateBodyMetadataObj0,
  TerminalReaderCreateBodyMetadataObj0,
} from "./terminal-reader-create-body-metadata-obj0";
import { zodRequiredAny, zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

/**
 * TerminalReaderCreateBody
 */
export type TerminalReaderCreateBody = {
  /**
   * Specifies which fields in the response should be expanded.
   */
  expand?: string[] | undefined;
  /**
   * Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
   */
  label?: string | undefined;
  /**
   * The location to assign the reader to.
   */
  location?: string | undefined;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
   */
  metadata?: (TerminalReaderCreateBodyMetadataObj0 | string) | undefined;
  /**
   * A code generated by the reader used for registering to an account.
   */
  registrationCode: string;

  // Index types must also accommodate all defined properties if present (typescript limitation)
  // In reality all additional properties should only have type `any`
  // (there might be some duplication here)
  [additionalProperty: string]:
    | (string[] | undefined)
    | (string | undefined)
    | (string | undefined)
    | ((TerminalReaderCreateBodyMetadataObj0 | string) | undefined)
    | string
    | any
    | null
    | undefined;
};

/**
 * @internal
 * TerminalReaderCreateBody without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$TerminalReaderCreateBody = {
  expand?: string[] | undefined;
  label?: string | undefined;
  location?: string | undefined;
  metadata?:
    | (External$TerminalReaderCreateBodyMetadataObj0 | string)
    | undefined;
  registration_code: string;

  [additionalProperty: string]:
    | (string[] | undefined)
    | (string | undefined)
    | (string | undefined)
    | ((External$TerminalReaderCreateBodyMetadataObj0 | string) | undefined)
    | string
    | External$TerminalReaderCreateBody
    | null
    | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object TerminalReaderCreateBody
 */
const SchemaIn$TerminalReaderCreateBody: z.ZodType<
  TerminalReaderCreateBody, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    expand: z.array(z.string()).optional(),
    label: z.string().optional(),
    location: z.string().optional(),
    metadata: z
      .union([Schemas$TerminalReaderCreateBodyMetadataObj0.in, z.string()])
      .optional(),
    registration_code: z.string(),
  })
  .catchall(zodRequiredAny)
  .transform((obj) => {
    return zodTransform(obj, {
      expand: "expand",
      label: "label",
      location: "location",
      metadata: "metadata",
      registration_code: "registrationCode",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$TerminalReaderCreateBody
 */
const SchemaOut$TerminalReaderCreateBody: z.ZodType<
  External$TerminalReaderCreateBody, // output type of this zod object
  z.ZodTypeDef,
  TerminalReaderCreateBody // the object to be transformed
> = z
  .object({
    expand: z.array(z.string()).optional(),
    label: z.string().optional(),
    location: z.string().optional(),
    metadata: z
      .union([Schemas$TerminalReaderCreateBodyMetadataObj0.out, z.string()])
      .optional(),
    registrationCode: z.string(),
  })
  .catchall(zodRequiredAny)
  .transform((obj) => {
    return zodTransform(obj, {
      expand: "expand",
      label: "label",
      location: "location",
      metadata: "metadata",
      registrationCode: "registration_code",
    });
  });

export const Schemas$TerminalReaderCreateBody = {
  in: SchemaIn$TerminalReaderCreateBody,
  out: SchemaOut$TerminalReaderCreateBody,
};
