import {
  External$PaymentMethod,
  PaymentMethod,
  Schemas$PaymentMethod,
} from "./payment-method";
import {
  External$PaymentMethodDetailsCardPresentOffline,
  PaymentMethodDetailsCardPresentOffline,
  Schemas$PaymentMethodDetailsCardPresentOffline,
} from "./payment-method-details-card-present-offline";
import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type SetupAttemptPaymentMethodDetailsCardPresent = {
  /**
   * The ID of the Card PaymentMethod which was generated by this SetupAttempt.
   */
  generatedCard?: (string | PaymentMethod) | undefined;
  offline?: PaymentMethodDetailsCardPresentOffline | undefined;
};

/**
 * @internal
 * SetupAttemptPaymentMethodDetailsCardPresent without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$SetupAttemptPaymentMethodDetailsCardPresent = {
  generated_card?: (string | External$PaymentMethod) | undefined;
  offline?: External$PaymentMethodDetailsCardPresentOffline | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object SetupAttemptPaymentMethodDetailsCardPresent
 */
const SchemaIn$SetupAttemptPaymentMethodDetailsCardPresent: z.ZodType<
  SetupAttemptPaymentMethodDetailsCardPresent, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    generated_card: z
      .union([z.string(), z.lazy(() => Schemas$PaymentMethod.in)])
      .optional(),
    offline: Schemas$PaymentMethodDetailsCardPresentOffline.in.optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      generated_card: "generatedCard",
      offline: "offline",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$SetupAttemptPaymentMethodDetailsCardPresent
 */
const SchemaOut$SetupAttemptPaymentMethodDetailsCardPresent: z.ZodType<
  External$SetupAttemptPaymentMethodDetailsCardPresent, // output type of this zod object
  z.ZodTypeDef,
  SetupAttemptPaymentMethodDetailsCardPresent // the object to be transformed
> = z
  .object({
    generatedCard: z
      .union([z.string(), z.lazy(() => Schemas$PaymentMethod.out)])
      .optional(),
    offline: Schemas$PaymentMethodDetailsCardPresentOffline.out.optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      generatedCard: "generated_card",
      offline: "offline",
    });
  });

export const Schemas$SetupAttemptPaymentMethodDetailsCardPresent = {
  in: SchemaIn$SetupAttemptPaymentMethodDetailsCardPresent,
  out: SchemaOut$SetupAttemptPaymentMethodDetailsCardPresent,
};
