import { External$Mandate, Mandate, Schemas$Mandate } from "./mandate";
import {
  External$PaymentMethod,
  PaymentMethod,
  Schemas$PaymentMethod,
} from "./payment-method";
import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type PaymentMethodDetailsSofort = {
  /**
   * Bank code of bank associated with the bank account.
   */
  bankCode?: string | null | undefined;
  /**
   * Name of the bank associated with the bank account.
   */
  bankName?: string | null | undefined;
  /**
   * Bank Identifier Code of the bank associated with the bank account.
   */
  bic?: string | null | undefined;
  /**
   * Two-letter ISO code representing the country the bank account is located in.
   */
  country?: string | null | undefined;
  /**
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generatedSepaDebit?: (string | PaymentMethod) | undefined;
  /**
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generatedSepaDebitMandate?: (string | Mandate) | undefined;
  /**
   * Last four characters of the IBAN.
   */
  ibanLast4?: string | null | undefined;
  /**
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
   */
  preferredLanguage?:
    | ("de" | "en" | "es" | "fr" | "it" | "nl" | "pl")
    | null
    | undefined;
  /**
   * Owner's verified full name. Values are verified or provided by SOFORT directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verifiedName?: string | null | undefined;
};

/**
 * @internal
 * PaymentMethodDetailsSofort without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$PaymentMethodDetailsSofort = {
  bank_code?: string | null | undefined;
  bank_name?: string | null | undefined;
  bic?: string | null | undefined;
  country?: string | null | undefined;
  generated_sepa_debit?: (string | External$PaymentMethod) | undefined;
  generated_sepa_debit_mandate?: (string | External$Mandate) | undefined;
  iban_last4?: string | null | undefined;
  preferred_language?:
    | ("de" | "en" | "es" | "fr" | "it" | "nl" | "pl")
    | null
    | undefined;
  verified_name?: string | null | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object PaymentMethodDetailsSofort
 */
const SchemaIn$PaymentMethodDetailsSofort: z.ZodType<
  PaymentMethodDetailsSofort, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    bank_code: z.string().nullable().optional(),
    bank_name: z.string().nullable().optional(),
    bic: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    generated_sepa_debit: z
      .union([z.string(), z.lazy(() => Schemas$PaymentMethod.in)])
      .optional(),
    generated_sepa_debit_mandate: z
      .union([z.string(), z.lazy(() => Schemas$Mandate.in)])
      .optional(),
    iban_last4: z.string().nullable().optional(),
    preferred_language: z
      .enum(["de", "en", "es", "fr", "it", "nl", "pl"])
      .nullable()
      .optional(),
    verified_name: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      bank_code: "bankCode",
      bank_name: "bankName",
      bic: "bic",
      country: "country",
      generated_sepa_debit: "generatedSepaDebit",
      generated_sepa_debit_mandate: "generatedSepaDebitMandate",
      iban_last4: "ibanLast4",
      preferred_language: "preferredLanguage",
      verified_name: "verifiedName",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$PaymentMethodDetailsSofort
 */
const SchemaOut$PaymentMethodDetailsSofort: z.ZodType<
  External$PaymentMethodDetailsSofort, // output type of this zod object
  z.ZodTypeDef,
  PaymentMethodDetailsSofort // the object to be transformed
> = z
  .object({
    bankCode: z.string().nullable().optional(),
    bankName: z.string().nullable().optional(),
    bic: z.string().nullable().optional(),
    country: z.string().nullable().optional(),
    generatedSepaDebit: z
      .union([z.string(), z.lazy(() => Schemas$PaymentMethod.out)])
      .optional(),
    generatedSepaDebitMandate: z
      .union([z.string(), z.lazy(() => Schemas$Mandate.out)])
      .optional(),
    ibanLast4: z.string().nullable().optional(),
    preferredLanguage: z
      .enum(["de", "en", "es", "fr", "it", "nl", "pl"])
      .nullable()
      .optional(),
    verifiedName: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      bankCode: "bank_code",
      bankName: "bank_name",
      bic: "bic",
      country: "country",
      generatedSepaDebit: "generated_sepa_debit",
      generatedSepaDebitMandate: "generated_sepa_debit_mandate",
      ibanLast4: "iban_last4",
      preferredLanguage: "preferred_language",
      verifiedName: "verified_name",
    });
  });

export const Schemas$PaymentMethodDetailsSofort = {
  in: SchemaIn$PaymentMethodDetailsSofort,
  out: SchemaOut$PaymentMethodDetailsSofort,
};
