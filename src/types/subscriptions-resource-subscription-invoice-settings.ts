import {
  ConnectAccountReference,
  External$ConnectAccountReference,
  Schemas$ConnectAccountReference,
} from "./connect-account-reference";
import {
  DeletedTaxId,
  External$DeletedTaxId,
  Schemas$DeletedTaxId,
} from "./deleted-tax-id";
import { External$TaxId, Schemas$TaxId, TaxId } from "./tax-id";
import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type SubscriptionsResourceSubscriptionInvoiceSettings = {
  /**
   * The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription.
   */
  accountTaxIds?: (string | TaxId | DeletedTaxId)[] | null | undefined;
  issuer: ConnectAccountReference;
};

/**
 * @internal
 * SubscriptionsResourceSubscriptionInvoiceSettings without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$SubscriptionsResourceSubscriptionInvoiceSettings = {
  account_tax_ids?:
    | (string | External$TaxId | External$DeletedTaxId)[]
    | null
    | undefined;
  issuer: External$ConnectAccountReference;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object SubscriptionsResourceSubscriptionInvoiceSettings
 */
const SchemaIn$SubscriptionsResourceSubscriptionInvoiceSettings: z.ZodType<
  SubscriptionsResourceSubscriptionInvoiceSettings, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    account_tax_ids: z
      .array(
        z.union([
          z.string(),
          z.lazy(() => Schemas$TaxId.in),
          Schemas$DeletedTaxId.in,
        ]),
      )
      .nullable()
      .optional(),
    issuer: z.lazy(() => Schemas$ConnectAccountReference.in),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      account_tax_ids: "accountTaxIds",
      issuer: "issuer",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$SubscriptionsResourceSubscriptionInvoiceSettings
 */
const SchemaOut$SubscriptionsResourceSubscriptionInvoiceSettings: z.ZodType<
  External$SubscriptionsResourceSubscriptionInvoiceSettings, // output type of this zod object
  z.ZodTypeDef,
  SubscriptionsResourceSubscriptionInvoiceSettings // the object to be transformed
> = z
  .object({
    accountTaxIds: z
      .array(
        z.union([
          z.string(),
          z.lazy(() => Schemas$TaxId.out),
          Schemas$DeletedTaxId.out,
        ]),
      )
      .nullable()
      .optional(),
    issuer: z.lazy(() => Schemas$ConnectAccountReference.out),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      accountTaxIds: "account_tax_ids",
      issuer: "issuer",
    });
  });

export const Schemas$SubscriptionsResourceSubscriptionInvoiceSettings = {
  in: SchemaIn$SubscriptionsResourceSubscriptionInvoiceSettings,
  out: SchemaOut$SubscriptionsResourceSubscriptionInvoiceSettings,
};
