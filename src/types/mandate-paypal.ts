import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type MandatePaypal = {
  /**
   * The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
   */
  billingAgreementId?: string | null | undefined;
  /**
   * PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
   */
  payerId?: string | null | undefined;
};

/**
 * @internal
 * MandatePaypal without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$MandatePaypal = {
  billing_agreement_id?: string | null | undefined;
  payer_id?: string | null | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object MandatePaypal
 */
const SchemaIn$MandatePaypal: z.ZodType<
  MandatePaypal, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    billing_agreement_id: z.string().nullable().optional(),
    payer_id: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      billing_agreement_id: "billingAgreementId",
      payer_id: "payerId",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$MandatePaypal
 */
const SchemaOut$MandatePaypal: z.ZodType<
  External$MandatePaypal, // output type of this zod object
  z.ZodTypeDef,
  MandatePaypal // the object to be transformed
> = z
  .object({
    billingAgreementId: z.string().nullable().optional(),
    payerId: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      billingAgreementId: "billing_agreement_id",
      payerId: "payer_id",
    });
  });

export const Schemas$MandatePaypal = {
  in: SchemaIn$MandatePaypal,
  out: SchemaOut$MandatePaypal,
};
