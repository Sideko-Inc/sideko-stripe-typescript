import {
  External$PaypalSellerProtection,
  PaypalSellerProtection,
  Schemas$PaypalSellerProtection,
} from "./paypal-seller-protection";
import { zodTransform } from "@sideko-inc/stripe/core";
import * as z from "zod";

export type PaymentMethodDetailsPaypal = {
  /**
   * Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  country?: string | null | undefined;
  /**
   * Owner's email. Values are provided by PayPal directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  payerEmail?: string | null | undefined;
  /**
   * PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
   */
  payerId?: string | null | undefined;
  /**
   * Owner's full name. Values provided by PayPal directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  payerName?: string | null | undefined;
  sellerProtection?: PaypalSellerProtection | undefined;
  /**
   * A unique ID generated by PayPal for this transaction.
   */
  transactionId?: string | null | undefined;
};

/**
 * @internal
 * PaymentMethodDetailsPaypal without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$PaymentMethodDetailsPaypal = {
  country?: string | null | undefined;
  payer_email?: string | null | undefined;
  payer_id?: string | null | undefined;
  payer_name?: string | null | undefined;
  seller_protection?: External$PaypalSellerProtection | undefined;
  transaction_id?: string | null | undefined;
};

/**
 * Takes network data, validates it, and transforms keys to match typescript object PaymentMethodDetailsPaypal
 */
const SchemaIn$PaymentMethodDetailsPaypal: z.ZodType<
  PaymentMethodDetailsPaypal, // output type of this zod object
  z.ZodTypeDef,
  unknown
> = z
  .object({
    country: z.string().nullable().optional(),
    payer_email: z.string().nullable().optional(),
    payer_id: z.string().nullable().optional(),
    payer_name: z.string().nullable().optional(),
    seller_protection: Schemas$PaypalSellerProtection.in.optional(),
    transaction_id: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      country: "country",
      payer_email: "payerEmail",
      payer_id: "payerId",
      payer_name: "payerName",
      seller_protection: "sellerProtection",
      transaction_id: "transactionId",
    });
  });

/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$PaymentMethodDetailsPaypal
 */
const SchemaOut$PaymentMethodDetailsPaypal: z.ZodType<
  External$PaymentMethodDetailsPaypal, // output type of this zod object
  z.ZodTypeDef,
  PaymentMethodDetailsPaypal // the object to be transformed
> = z
  .object({
    country: z.string().nullable().optional(),
    payerEmail: z.string().nullable().optional(),
    payerId: z.string().nullable().optional(),
    payerName: z.string().nullable().optional(),
    sellerProtection: Schemas$PaypalSellerProtection.out.optional(),
    transactionId: z.string().nullable().optional(),
  })
  .transform((obj) => {
    return zodTransform(obj, {
      country: "country",
      payerEmail: "payer_email",
      payerId: "payer_id",
      payerName: "payer_name",
      sellerProtection: "seller_protection",
      transactionId: "transaction_id",
    });
  });

export const Schemas$PaymentMethodDetailsPaypal = {
  in: SchemaIn$PaymentMethodDetailsPaypal,
  out: SchemaOut$PaymentMethodDetailsPaypal,
};
