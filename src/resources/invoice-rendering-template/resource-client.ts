import { types } from "@sideko-inc/stripe";
import {
  ApiPromise,
  CoreClient,
  CoreResourceClient,
  RequestOptions,
  ResourceClientOptions,
  encodeQueryParam,
} from "@sideko-inc/stripe/core";
import * as requests from "@sideko-inc/stripe/resources/invoice-rendering-template/request-types";
import { Schemas$InvoiceRenderingTemplate } from "@sideko-inc/stripe/types/invoice-rendering-template";
import { Schemas$InvoiceRenderingTemplateArchiveBody } from "@sideko-inc/stripe/types/invoice-rendering-template-archive-body";
import { Schemas$InvoiceRenderingTemplateListResponse } from "@sideko-inc/stripe/types/invoice-rendering-template-list-response";
import { Schemas$InvoiceRenderingTemplateUnarchiveBody } from "@sideko-inc/stripe/types/invoice-rendering-template-unarchive-body";
import * as z from "zod";

export class InvoiceRenderingTemplateClient extends CoreResourceClient {
  constructor(coreClient: CoreClient, opts: ResourceClientOptions) {
    super(coreClient, opts);
  }
  /**
   * List all invoice rendering templates
   *
   * <p>List all templates, ordered by creation date, with the most recently created template appearing first.</p>
   *
   * GET /v1/invoice_rendering_templates
   */
  list(
    request: requests.ListRequest = {},
    opts?: RequestOptions,
  ): ApiPromise<types.InvoiceRenderingTemplateListResponse> {
    return this._client.makeRequest({
      method: "get",
      path: "/v1/invoice_rendering_templates",
      auth: ["bearerAuth"],
      query: [
        encodeQueryParam({
          name: "ending_before",
          value: z.string().optional().parse(request.endingBefore),
          style: "form",
          explode: true,
        }),
        encodeQueryParam({
          name: "expand",
          value: z.array(z.string()).optional().parse(request.expand),
          style: "deepObject",
          explode: true,
        }),
        encodeQueryParam({
          name: "limit",
          value: z.number().int().optional().parse(request.limit),
          style: "form",
          explode: true,
        }),
        encodeQueryParam({
          name: "starting_after",
          value: z.string().optional().parse(request.startingAfter),
          style: "form",
          explode: true,
        }),
        encodeQueryParam({
          name: "status",
          value: z
            .enum(["active", "archived"])
            .optional()
            .parse(request.status),
          style: "form",
          explode: true,
        }),
      ],
      responseSchema: Schemas$InvoiceRenderingTemplateListResponse.in,
      opts,
    });
  }
  /**
   * Retrieve an invoice rendering template
   *
   * <p>Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template. Optionally, specify a version to see previous versions.</p>
   *
   * GET /v1/invoice_rendering_templates/{template}
   */
  get(
    request: requests.GetRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.InvoiceRenderingTemplate> {
    return this._client.makeRequest({
      method: "get",
      path: `/v1/invoice_rendering_templates/${request.template}`,
      auth: ["bearerAuth"],
      query: [
        encodeQueryParam({
          name: "expand",
          value: z.array(z.string()).optional().parse(request.expand),
          style: "deepObject",
          explode: true,
        }),
        encodeQueryParam({
          name: "version",
          value: z.number().int().optional().parse(request.version),
          style: "form",
          explode: true,
        }),
      ],
      responseSchema: Schemas$InvoiceRenderingTemplate.in,
      opts,
    });
  }
  /**
   * Archive an invoice rendering template
   *
   * <p>Updates the status of an invoice rendering template to ‘archived’ so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.</p>
   *
   * POST /v1/invoice_rendering_templates/{template}/archive
   */
  archive(
    request: requests.ArchiveRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.InvoiceRenderingTemplate> {
    return this._client.makeRequest({
      method: "post",
      path: `/v1/invoice_rendering_templates/${request.template}/archive`,
      auth: ["bearerAuth"],
      contentType: "application/x-www-form-urlencoded",
      body: request.data
        ? Schemas$InvoiceRenderingTemplateArchiveBody.out.parse(request.data)
        : undefined,
      bodyEncoding: {
        style: { expand: "deepObject" },
        explode: { expand: true },
      },
      responseSchema: Schemas$InvoiceRenderingTemplate.in,
      opts,
    });
  }
  /**
   * Unarchive an invoice rendering template
   *
   * <p>Unarchive an invoice rendering template so it can be used on new Stripe objects again.</p>
   *
   * POST /v1/invoice_rendering_templates/{template}/unarchive
   */
  unarchive(
    request: requests.UnarchiveRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.InvoiceRenderingTemplate> {
    return this._client.makeRequest({
      method: "post",
      path: `/v1/invoice_rendering_templates/${request.template}/unarchive`,
      auth: ["bearerAuth"],
      contentType: "application/x-www-form-urlencoded",
      body: request.data
        ? Schemas$InvoiceRenderingTemplateUnarchiveBody.out.parse(request.data)
        : undefined,
      bodyEncoding: {
        style: { expand: "deepObject" },
        explode: { expand: true },
      },
      responseSchema: Schemas$InvoiceRenderingTemplate.in,
      opts,
    });
  }
}
